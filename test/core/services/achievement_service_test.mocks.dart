// Mocks generated by Mockito 5.4.4 from annotations
// in gamified_tax_deduction/test/core/services/achievement_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i8;

import 'package:gamified_tax_deduction/core/database/database_helper.dart'
    as _i3;
import 'package:gamified_tax_deduction/core/models/achievement.dart' as _i6;
import 'package:gamified_tax_deduction/core/models/data_models.dart' as _i5;
import 'package:gamified_tax_deduction/core/services/achievement_service.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseHelper_1 extends _i1.SmartFake
    implements _i3.DatabaseHelper {
  _FakeDatabaseHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertReceipt(_i5.Receipt? receipt) => (super.noSuchMethod(
        Invocation.method(
          #insertReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.Receipt>> getAllReceipts() => (super.noSuchMethod(
        Invocation.method(
          #getAllReceipts,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Receipt>>.value(<_i5.Receipt>[]),
      ) as _i4.Future<List<_i5.Receipt>>);

  @override
  _i4.Future<double> getTotalPotentialSavings() => (super.noSuchMethod(
        Invocation.method(
          #getTotalPotentialSavings,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<int> getReceiptCount() => (super.noSuchMethod(
        Invocation.method(
          #getReceiptCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Achievement>> getAchievements() => (super.noSuchMethod(
        Invocation.method(
          #getAchievements,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.Achievement>>.value(<_i6.Achievement>[]),
      ) as _i4.Future<List<_i6.Achievement>>);

  @override
  _i4.Future<void> updateAchievement(_i6.Achievement? achievement) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAchievement,
          [achievement],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AchievementService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAchievementService extends _i1.Mock
    implements _i7.AchievementService {
  MockAchievementService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DatabaseHelper get dbHelper => (super.noSuchMethod(
        Invocation.getter(#dbHelper),
        returnValue: _FakeDatabaseHelper_1(
          this,
          Invocation.getter(#dbHelper),
        ),
      ) as _i3.DatabaseHelper);

  @override
  List<_i6.Achievement> get achievements => (super.noSuchMethod(
        Invocation.getter(#achievements),
        returnValue: <_i6.Achievement>[],
      ) as List<_i6.Achievement>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> checkAchievements(
    int? receiptCount,
    double? totalSavings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAchievements,
          [
            receiptCount,
            totalSavings,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
